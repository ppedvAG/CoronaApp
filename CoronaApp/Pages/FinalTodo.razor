@page "/final"
@inject IJSRuntime JsRuntime;
@using System.Text.Json
@using Data
<h3>FinalTodo</h3>
was
<input @bind="neuAufgabe.Text" />
<br />
bis wann
@*<input value="@neuAufgabe.ErledigtBis" @onchange="even12" />*@

@*@ bind:event="onall"*@
<input @bind="neuAufgabe.ErledigtBis" type="datetime-local"
       @bind:format="dd.MM.yyyy" @bind:culture='System.Globalization.CultureInfo.GetCultureInfo("de-DE")' />
<button @onclick="neue">Anlegen</button>
<ul class="list-group">
    @foreach (var item in Aufgaben)
    {
    <li @key="item.ID" class="list-group-item">
        <input type="checkbox" @bind="item.Erledigt" @onfocusout="aktualisiere"/>
        
         <span style='@(item.Erledigt?"text-decoration:line-through":"")'> @item.Text @item.ErledigtBis</span>
    </li>

    }
</ul>

@code {
    public CoronaApp.Data.Aufgabe neuAufgabe { get; set; } = new Aufgabe();
    public List<CoronaApp.Data.Aufgabe> Aufgaben { get; set; } = new List<Aufgabe>();
    void aktualisiere()
    {
        var daten = JsonSerializer.Serialize(Aufgaben);
        JsRuntime.InvokeVoidAsync("localStorage.setItem", "todos", daten);

    }

    void neue()
    {

        Aufgaben.Add(new Data.Aufgabe() { ID = Aufgaben.Count, Text = neuAufgabe.Text, ErledigtBis = neuAufgabe.ErledigtBis });
        var daten = JsonSerializer.Serialize(Aufgaben);
        JsRuntime.InvokeVoidAsync("localStorage.setItem", "todos", daten);
    }
    protected override async Task OnInitializedAsync()
    {
        neuAufgabe.ErledigtBis = DateTime.Now.AddDays(2);

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var daten = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "todos");


            Aufgaben = JsonSerializer.Deserialize<List<Aufgabe>>(daten);
            StateHasChanged();
        }

    }
}
